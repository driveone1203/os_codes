#include <stdio.h>
#include <stdlib.h>
void firstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }
    int internalFragmentation = 0;
    int externalFragmentation = 0;
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                internalFragmentation += blockSize[j] - processSize[i];
                blockSize[j] -= processSize[i];
                found = 1;
                break;
            }
        }
        if (!found) {
            printf("Process %d could not be allocated memory\n", i + 1);
            externalFragmentation += processSize[i];
        }
    }
    printf("\nFirst Fit Algorithm:\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("Process %d is allocated to block %d\n", i + 1, allocation[i] + 1);
        } else {
            printf("Process %d is not allocated\n", i + 1);
        }
    }
    printf("\nInternal Fragmentation: %d KB\n", internalFragmentation);
    printf("External Fragmentation: %d KB\n", externalFragmentation);
}
void bestFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }
    int internalFragmentation = 0;
    int externalFragmentation = 0;
    for (int i = 0; i < n; i++) {
        int bestIdx = -1;
        int minDiff = 999999;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                int diff = blockSize[j] - processSize[i];
                if (diff < minDiff) {
                    minDiff = diff;
                    bestIdx = j;
                }
            }
        }
        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            internalFragmentation += minDiff;
            blockSize[bestIdx] -= processSize[i];
        } else {
            printf("Process %d could not be allocated memory\n", i + 1);
            externalFragmentation += processSize[i];
        }
    }
    printf("\nBest Fit Algorithm:\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("Process %d is allocated to block %d\n", i + 1, allocation[i] + 1);
        } else {
            printf("Process %d is not allocated\n", i + 1);
        }
    }
    printf("\nInternal Fragmentation: %d KB\n", internalFragmentation);
    printf("External Fragmentation: %d KB\n", externalFragmentation);
}
int main() {
    int ramSize, numPartitions, numProcesses;
    printf("Enter the size of RAM (in KB): ");
    scanf("%d", &ramSize);
    printf("Enter the number of partitions: ");
    scanf("%d", &numPartitions);
    int blockSize[numPartitions];
    printf("Enter the size of each partition (in KB):\n");
    for (int i = 0; i < numPartitions; i++) {
        scanf("%d", &blockSize[i]);
    }
    printf("Enter the number of processes: ");
    scanf("%d", &numProcesses);
    int processSize[numProcesses];
    printf("Enter the size of each process (in KB):\n");
    for (int i = 0; i < numProcesses; i++) {
        scanf("%d", &processSize[i]);
    }
    firstFit(blockSize, numPartitions, processSize, numProcesses);
    bestFit(blockSize, numPartitions, processSize, numProcesses);
    return 0;
}
