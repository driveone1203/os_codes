// FIFO
#include <stdio.h>
#define MAX_FRAMES 3
#define MAX_PAGES 11
int main() {
    int pages[MAX_PAGES] = {2, 3, 4, 2, 5, 7, 7, 1, 4, 3, 5};
    int frames[MAX_FRAMES];
    int page_faults = 0;
    int next_frame = 0;
    int i, j;
    float miss, hit;
    // Initialize frames to -1 (indicating empty)
    for (i = 0; i < MAX_FRAMES; i++) {
        frames[i] = -1;
    }
    printf("Page Frames: \n");
    for (i = 0; i < MAX_PAGES; i++) {
        int page = pages[i];
        int found = 0;
        // Check if page is already in frames
        for (j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }
        if (!found) {
            // Page fault occurred
            printf("Page fault for page %d, replacing page %d\n", page, frames[next_frame]);
            frames[next_frame] = page;
            next_frame = (next_frame + 1) % MAX_FRAMES;
            page_faults++;
        }
        // Print current state of frames
        printf("[ ");
        for (j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == -1)
                printf("_ ");
            else
                printf("%d ", frames[j]);
        }
        printf("]\n");
    }
    printf("Total Page Faults: %d\n", page_faults);
    miss = ((page_faults+0.0)/(MAX_PAGES+0.0))*100;
    hit = 100-miss;
    printf("Miss ratio: %f\n", miss);
    printf("Hit ratio: %f\n", hit);
    return 0;
}


// LRU
#include <stdio.h>
#include <stdbool.h>
#define MAX_FRAMES 3
#define MAX_PAGES 11
int main() {
    int pages[MAX_PAGES] = {2, 3, 4, 2, 5, 7, 7, 1, 4, 3, 5};
    int frames[MAX_FRAMES];
    int page_faults = 0;
    int i, j, k;
    float miss, hit;
    // Initialize frames to -1 (indicating empty)
    for (i = 0; i < MAX_FRAMES; i++) {
        frames[i] = -1;
    }
    printf("Page Frames: \n");
    for (i = 0; i < MAX_PAGES; i++) {
        int page = pages[i];
        bool found = false;
        // Check if page is already in frames
        for (j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = true;
                break;
            }
        }
        if (!found) {
            // Page fault occurred
            printf("Page fault for page %d\n", page);
            // Find least recently used page
            int lru_index = 0;
            int min_use = i;
            for (j = 0; j < MAX_FRAMES; j++) {
                for (k = i - 1; k >= 0; k--) {
                    if (frames[j] == pages[k] && k < min_use) {
                        min_use = k;
                        lru_index = j;
                        break;
                    }
                }
            }
            frames[lru_index] = page;
            page_faults++;
        }
        // Print current state of frames
        printf("[ ");
        for (j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == -1)
                printf("_ ");
            else
                printf("%d ", frames[j]);
        }
        printf("]\n");
    }
    printf("Total Page Faults: %d\n", page_faults);
    miss = ((page_faults+0.0)/(MAX_PAGES+0.0))*100;
    hit = 100-miss;
    printf("Miss ratio: %f\n", miss);
    printf("Hit ratio: %f\n", hit);
    return 0;
}


// Optimal
#include <stdio.h>
#include <stdbool.h>
#define MAX_FRAMES 3
#define MAX_PAGES 11
int main() {
    int pages[MAX_PAGES] = {2, 3, 4, 2, 5, 7, 7, 1, 4, 3, 5};
    int frames[MAX_FRAMES];
    int page_faults = 0;
    int i, j, k;
    float miss, hit;
    // Initialize frames to -1 (indicating empty)
    for (i = 0; i < MAX_FRAMES; i++) {
        frames[i] = -1;
    }
    printf("Page Frames: \n");
    for (i = 0; i < MAX_PAGES; i++) {
        int page = pages[i];
        bool found = false;
        // Check if page is already in frames
        for (j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = true;
                break;
            }
        }
        if (!found) {
            // Page fault occurred
            printf("Page fault for page %d\n", page);
            // Find page that will be referenced farthest in the future
            int farthest = -1;
            int replace_index = 0;
            for (j = 0; j < MAX_FRAMES; j++) {
                bool found_future = false;
                for (k = i + 1; k < MAX_PAGES; k++) {
                    if (frames[j] == pages[k]) {
                        found_future = true;
                        if (k > farthest) {
                            farthest = k;
                            replace_index = j;
                        }
                        break;
                    }
                }
                if (!found_future) {
                    replace_index = j;
                    break;
                }
            }
            frames[replace_index] = page;
            page_faults++;
        }
        // Print current state of frames
        printf("[ ");
        for (j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == -1)
                printf("_ ");
            else
                printf("%d ", frames[j]);
        }
        printf("]\n");
    }
    printf("Total Page Faults: %d\n", page_faults);
    miss = ((page_faults+0.0)/(MAX_PAGES+0.0))*100;
    hit = 100-miss;
    printf("Miss ratio: %f\n", miss);
    printf("Hit ratio: %f\n", hit);
    return 0;
}
